//SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

/*
Variables are declared as either storage, memory or calldata to explicitly specify the location of the data.
storage - variable is a state variable (store on blockchain)
memory - variable is in memory and it exists while a function is being called
calldata - special data location that contains function arguments
storage
It can be used for both function declaration parameters as well as within the function logic
It is mutable (it can be overwritten and changed)
It is persistent (the value persists on the blockchain)
memory
It can be used for both function declaration parameters as well as within the function logic
It is mutable (it can be overwritten and changed)
It is non-persistent (the value does not persist after the transaction has completed)
callData
It can only be used for function declaration parameters (and not function logic)
It is immutable (it can't be overwritten and changed)
It must be used for dynamic parameters of an external function
It is non-persistent (the value does not persist after the transaction has completed)
*/

contract MemoryDatalocation{
    function addReturnAppropriateSpring(uint a, uint b) public pure returns (string memory){

        uint c = a - b;
        string memory output;

        if (c > 0){
            output = "result greater than zero";
        }
        else{
            output = "result is zero";
        }
        

        return output;
    }
}
