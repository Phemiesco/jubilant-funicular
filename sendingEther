//SPDX-License-Identifier: MIT
pragma solidity ^0.8.5;

contract Receiver{
    event Received(address caller, uint amount, string message);
    event FallbackTriggered(string message);

    fallback() external payable {
        emit FallbackTriggered("fallback was triggered");
    }
    function foo(string memory _message, uint _x, uint _y) public payable returns(uint) {
        emit Received(msg.sender, msg.value, _message);
    
    return _x +1;
    }
    
   function getseniordev() public returns(string memory seniordev){
       seniordev = "Oluwafemi and Adewale and Ogundoju";
    }
}

contract caller{
    event Response(bool success, bytes data);

    function testcallfoo(address payable _addr) public payable{
        (bool success, bytes memory data) = _addr.call{value: msg.value}(
            abi.encodeWithSignature("foo(string,uint256,uint256)", "call foo", 500, 50)
        );

        emit Response(success, data);
    }


        function testCallNonExistent(address _addr) public {
            (bool success, bytes memory data) = _addr.call(
                abi.encodeWithSignature("getseniordev()")
            );
       emit  Response(success, data);
   }

}
